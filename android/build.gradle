buildscript {
    ext.kotlin_version = '2.0.21'
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.0"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" } // Add this line for JitPack
    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            project.android {
                if (namespace == null || namespace.isEmpty()) {
                    def defaultNamespace = project.group.toString().replace('.', '_')
                    namespace = defaultNamespace
                }
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_17
                    targetCompatibility JavaVersion.VERSION_17
                }

                buildFeatures {
                    buildConfig = true
                }
            }

            // Task to ensure namespace and remove package attribute
            project.tasks.register("fixManifestsAndNamespace") {
                doLast {
                    // Ensure namespace in build.gradle
                    def buildGradleFile = file("${project.projectDir}/build.gradle")
                    if (buildGradleFile.exists()) {
                        def buildGradleContent = buildGradleFile.getText('UTF-8')
                        def manifestFile = file("${project.projectDir}/src/main/AndroidManifest.xml")
                        if (manifestFile.exists()) {
                            def manifestContent = manifestFile.getText('UTF-8')
                            def packageName = manifestContent.find(/package="([^"]+)"/) { match, p -> p }
                            if (packageName && !buildGradleContent.contains("namespace")) {
                                println "Setting namespace in ${buildGradleFile}"
                                buildGradleContent = buildGradleContent.replaceFirst(
                                        /android\s*\{/, "android {\n    namespace '${packageName}'"
                                )
                                buildGradleFile.write(buildGradleContent, 'UTF-8')
                            }
                        }
                    }

                    // Remove package attribute from AndroidManifest.xml
                    def manifests = fileTree(dir: project.projectDir, includes: ['**/AndroidManifest.xml'])
                    manifests.each { File manifestFile ->
                        def manifestContent = manifestFile.getText('UTF-8')
                        if (manifestContent.contains('package=')) {
                            println "Removing package attribute from ${manifestFile}"
                            manifestContent = manifestContent.replaceAll(/package="[^"]*"/, '')
                            manifestFile.write(manifestContent, 'UTF-8')
                        }
                    }
                }
            }

            // Ensure the task runs before the build process
            project.tasks.matching { it.name.startsWith("preBuild") }.all {
                dependsOn project.tasks.named("fixManifestsAndNamespace")
            }
        }
    }
}
subprojects {
    project.evaluationDependsOn(':app')
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
